#!/usr/bin/env ruby

APP_PATH = File.expand_path('../../config/application',  __FILE__)
require File.expand_path('../../config/boot',  __FILE__)
require APP_PATH
Rails.application.require_environment!

require 'json'

# Only handle a segment of the data
part = ARGV.shift
parts = ARGV.shift
part = part.to_i if part
parts = parts.to_i if parts

canonical = Face.where("tag_id is not null").order(:tag_id).to_a
canonical.select! { _1.embedding? }

minuses = Hash.new { 0 }
pluses = Hash.new { 0 }

faces = Face.all

if part && parts
  # Divide ID space evenly
  max_id = Face.select("max(id) m").first.m
  start = max_id * part / parts
  finish = max_id * (part+1) / parts
  faces = faces.where(["id between #{start} and #{finish}", start, finish])
end

total = faces.size
count = 0
puts "#{canonical.size} canonical faces, #{total} faces, #{canonical.size * total} comparisons"


faces.includes(:item).find_in_batches(batch_size: 10_000).with_index do |group, batch|
  start = Time.new
  puts "Processing group #{batch}, #{canonical.size * group.size} comparisons"
  Face.transaction do
    group.each do |face|
      count += 1
      next unless face.embedding?
      winner = nil
      max = -2.0
      canonical.each do |canon|
        diff = canon.distance face
        if diff > max
          winner = canon
          max = diff
        end
      end
      if winner
        if face.cluster_id && face.cluster_id != winner.id
          puts "- #{face.cluster.tag&.label} (#{(face.similarity*100).round}%)"
          minuses[face.cluster.tag&.label] += 1
          puts "+ #{winner.tag&.label} (#{(max*100).round}%)"
          pluses[winner.tag&.label] += 1
        elsif face.cluster_id && face.cluster_id == winner.id
        else
          puts "+ #{winner.tag&.label} (#{(max*100).round}%)"
          pluses[winner.tag&.label] += 1
        end
        face.cluster_id = winner.id
        face.similarity = max
      else
        if face.cluster_id
          puts "- #{face.cluster.tag&.label} (#{(face.similarity*100).round}%)"
          minuses[face.cluster.tag&.label] += 1
        end
        face.cluster_id = nil
        face.similarity = nil
      end
      face.save!
    end
  end
  duration = Time.new - start
  rate = group.size / duration
  remaining_faces = total - count
  remaining_time = remaining_faces / rate
  puts "#{duration.round} seconds, #{rate.round(1)} faces/s; #{(remaining_time).round} seconds left"
end

puts "Changes:"
minuses.each do |k,v|
  puts "  #{k}: -#{v}"
end
pluses.each do |k,v|
  puts "  #{k}: +#{v}"
end

