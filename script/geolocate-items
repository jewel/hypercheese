#!/usr/bin/env ruby

APP_PATH = File.expand_path('../../config/application',  __FILE__)
require File.expand_path('../../config/boot',  __FILE__)
require APP_PATH
Rails.application.require_environment!

require 'rgeo/geo_json'
require_relative '../lib/rtree'

cache = Rails.root + "db/geo.index"
if cache.exist?
  rtree = Marshal.load File.open(cache.to_s, 'rb')
else
  rtree = RTree.new
  Dir.glob("#{Rails.root}/db/geo/*json").sort.each do |path|
    puts "Loading #{path}"

    # Load the geojson file containing the world's administrative areas
    json = File.read path
    world = JSON.parse json

    shapes = RGeo::GeoJSON.decode world

    puts "Indexing #{shapes.size} shapes"
    shapes.each_with_index do |shape,index|
      begin
        puts " #{(index.to_f/shapes.size*100).round}%" if index % 4000 == 0
        rtree.insert rtree.root, shape
      rescue RGeo::Error::InvalidGeometry
        puts "Problem with shape: #$!"
      end
    end
  end
  Marshal.dump rtree, File.open(cache.to_s, 'wb')
end

factory = RGeo::Geographic.simple_mercator_factory

# factory = RGeo::Geographic.spherical_factory
puts "Loading items"
items = Item.where(deleted: false, variety: 'photo').order("taken desc")
items.each do |item|
  Item.transaction do
    begin
      ItemLocation.where(item_id: item.id).destroy_all
      puts "Geolocating #{item.path}"
      exif = item.exif

      # Load the photo and extract the GPS coordinates
      next unless exif.gps
      latitude = exif.gps.latitude
      longitude = exif.gps.longitude
      item.latitude = latitude
      item.longitude = longitude
      item.save!

      # Create a point object representing the location of the photo
      point = factory.point longitude.to_f, latitude.to_f

      # Iterate over all the features in the geojson file to find the one
      # containing the photo's location
      matches = rtree.query rtree.root, point
      names = matches.map do |shape|
        name = shape[:shapeName] || shape[:NAME] || shape[:shapeGroup]
        geoid = shape[:shapeID] || shape[:GEOID] || shape[:shapeGroup]
        raise "No geoid for #{shape.properties.inspect}" if geoid.blank?
        raise "No name for #{shape.properties.inspect}" if name.blank?
        location = Location.find_by_geoid geoid
        if location && location.name != name
          raise "Multiple locations for #{geoid.inspect}"
        end
        if !location
          puts "  New location: #{name} #{geoid}"
          location = Location.create!({
            name: name,
            geoid: geoid,
            properties: shape.properties.to_json,
          })
        end
        ItemLocation.create!( item_id: item.id, location_id: location.id )
        name
      end
      puts "  -> #{names.join ', '}"
    rescue
     warn "Problem with #{item.path}: #{$!}"
    end
  end
end
