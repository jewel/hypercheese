#!/usr/bin/env ruby

APP_PATH = File.expand_path('../../config/application',  __FILE__)
require File.expand_path('../../config/boot',  __FILE__)
require APP_PATH
Rails.application.require_environment!

require_dependency 'import'

require 'find'

candidates = {}

raise "No directory passed" if ARGV.empty?

def update_deleted
  Item.where("id NOT IN ( SELECT item_id FROM item_paths )").update_all deleted: true
  Item.where("id IN ( SELECT item_id FROM item_paths )").update_all deleted: false
end

dir = ARGV.first
dir += "/" unless dir =~ /\/\Z/
basepath = dir.sub /\Aoriginals\//, ''

@warned = false
def check_exclude_regex path
  if Object.const_defined? :EXCLUDE_REGEX
    EXCLUDE_REGEX.each do |regex|
      return true if path =~ regex
    end
  else
    warn "Not excluding private files, no EXCLUDE_REGEX defined" unless @warned
    @warned = true
  end
  false
end

Find.find( "#{dir}" ) do |path|
  if File.basename( path ) =~ /\A\./
    Find.prune
    next
  end

  if File.basename( path ) == 'rdiff-backup-data'
    Find.prune
    next
  end

  next unless path =~ /\.(JPE?G|PNG|MOV|AVI|TIFF?|MTS|MP4|MKV|VOB|DV)\Z/i

  next if check_exclude_regex(path)

  path.sub! /\Aoriginals\//, ''
  candidates[path] = true
end

warn "Total of #{candidates.size} items" if $stderr.tty?

should_update_deleted = false

paths = ItemPath.where( ["path LIKE ?", "#{basepath}%"] )

paths.each do |item_path|
  if candidates[item_path.path]
    candidates.delete item_path.path unless ENV['IMPORT_ALL']
  else
    warn "#{item_path.path} no longer exists"
    item_path.destroy
    should_update_deleted = true
  end
end

update_deleted if should_update_deleted

exit if candidates.empty?

warn "There are #{candidates.size} new items"

candidates.keys.sort.each do |path|
  begin
    Import.by_path "originals/#{path}"
  rescue
    warn "FAILED #{path}: #$!"
  end
end

update_deleted

UpdateActivityJob.perform_now
